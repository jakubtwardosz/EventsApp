// <auto-generated />
using System;
using EventsApp.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventsApp.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230307113728_SeedDataUpdate")]
    partial class SeedDataUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventsApp.Shared.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "Dubstep",
                            Url = "dubstep"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Name = "Drum and bass",
                            Url = "drum-and-bass"
                        });
                });

            modelBuilder.Entity("EventsApp.Shared.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            City = "Kraków",
                            Date = new DateTime(2023, 2, 17, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Duet didżejski FATHERTZ po raz drugi wjeżdza do naszej piwnicy! 😎 Misje mają jedną - zadbać o najniższe częstotliwości i wymassssowac Wam uszy porządnym basssem!",
                            ImageUrl = "https://pixabay.com/get/gf9a83c63161cba0344bfff805686fb9f5a4d7947c5aae295a0944f0e0baaa247c9cbb637de52ae1349123439d8a313047351af0010af545ffd7e2411c3f33724f14768edf70fafaff0aa07c866e597df_1280.jpg",
                            Price = 7.99m,
                            Street = "Plac wolnica 10",
                            Title = "BASSTARDS 2.0: MATT GREEN / FATHERTZ"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            City = "Poznań",
                            Date = new DateTime(2023, 2, 24, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Digital Organism to cykl imprez, na których nie będziemy się z Wami pieścić. Nie obiecujemy cukierkowego klimatu. Nie zobaczycie męczących stroboli w klubie. Tylko kawał dobrej roboty muzyków oraz dekoratorów",
                            ImageUrl = "https://pixabay.com/get/gf9a83c63161cba0344bfff805686fb9f5a4d7947c5aae295a0944f0e0baaa247c9cbb637de52ae1349123439d8a313047351af0010af545ffd7e2411c3f33724f14768edf70fafaff0aa07c866e597df_1280.jpg",
                            Price = 8.99m,
                            Street = "Niepodległości 36",
                            Title = "Digital Organism VI: Unkey & MC Toast // Powered By Ashwagundub Soundsystem // 3 Urodziny"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            City = "Kraków",
                            Date = new DateTime(2023, 2, 25, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Description = "Siemanko dramendbejsowe świry! Tak jak obiecaliśmy - wracamy z drugą edycją bejsufki już 25 lutego w Klubie Baza! 🚀",
                            ImageUrl = "https://pixabay.com/get/gf9a83c63161cba0344bfff805686fb9f5a4d7947c5aae295a0944f0e0baaa247c9cbb637de52ae1349123439d8a313047351af0010af545ffd7e2411c3f33724f14768edf70fafaff0aa07c866e597df_1280.jpg",
                            Price = 9.99m,
                            Street = "Mostowa 2",
                            Title = "Bejsufka #2 | DNB | Klub Baza"
                        });
                });

            modelBuilder.Entity("EventsApp.Shared.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EventsApp.Shared.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventsApp.Shared.Event", b =>
                {
                    b.HasOne("EventsApp.Shared.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EventsApp.Shared.Image", b =>
                {
                    b.HasOne("EventsApp.Shared.Event", null)
                        .WithMany("Images")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("EventsApp.Shared.Event", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
