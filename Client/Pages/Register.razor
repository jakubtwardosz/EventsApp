@using EventsApp.Client.Services.AuthService;
@using EventsApp.Shared;

@page "/register"
@inject IAuthService AuthService


<PageTitle>Register</PageTitle>

<h3 class="mb-3">Register</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    
    <div class="row g-3">
        <div class="col-12">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control" placeholder="you@example.com" />
        </div>
        <div class="col-12">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" type="password" @bind-Value="user.Password" class="form-control" placeholder="Password" />
        </div>
        <div class="col-12">
            <label for="confirmPassword" class="form-label">Confirm password</label>
            <InputText id="confirmPassword" type="password" @bind-Value="user.ConfirmPassword" class="form-control" placeholder="Confirm password" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary mt-4">Register</button>
    <ValidationSummary class="mt-4" />
    <div class="alert alert-warning mt-4 @hideError" role="alert">
        @errorMessage
    </div>
</EditForm>

@code {

    UserRegister user = new UserRegister();

    string errorMessage = string.Empty;
    string hideError = "d-none";

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(user);

        if (!result.Success)
        {
            hideError = "d-show";
            errorMessage = result.Message;            
        }
        else
        {
            hideError = "d-none";
            errorMessage = string.Empty;
        }
    }
}

